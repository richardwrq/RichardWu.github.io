<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发工具 on RichardWu&#39;s Blog</title>
    <link>https://richardwrq.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 开发工具 on RichardWu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 02 Jan 2019 20:36:28 +0800</lastBuildDate>
    
	<atom:link href="https://richardwrq.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自定义Gradle插件</title>
      <link>https://richardwrq.github.io/2019/%E8%87%AA%E5%AE%9A%E4%B9%89gradle%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 02 Jan 2019 20:36:28 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2019/%E8%87%AA%E5%AE%9A%E4%B9%89gradle%E6%8F%92%E4%BB%B6/</guid>
      <description>是什么 Gradle是一个开源的自动化构建工具，可以使用groovy或kotlin来编写Gradle构建脚本，具有高度可定制、更快的编译速度以及功能强大等特性。
Gradle的核心为构建任何东西提供了一个基础架构，但是插件允许构建脚本作者花最少的努力完成任务，允许他们专注于构建什么，而不是如何构建。简单来说可以把Gradle理解为是一个编程框架，我们只要遵循它的设计规则，利用它提供的API可以编写出各种各样的插件；在Gradle中，每一个待编译的工程是一个Project，每一个Project在构建的时候都会包含一系列的Task。一个Android项目的构建大致包含：Kotlin源码编译、Java源码编译、资源编译、JNI编译、Lint检查、混淆、打包、签名等等若干个Task任务。
Gradle也是一个Java或者说JVM应用，这个应用的任务就是去完成构建期的工作，我们在编写Gradle插件的时候其实和编写一个Android应用是非常类似的，只需要遵循Gradle定义的规则以及了解它的一些生命周期即可（就和我们需要了解四大组件的生命周期一样）。
下面是一个Gradle项目的结构：
. ├── CustomPluginSample.iml ├── MyPlugin │ ├── MyPlugin.iml │ ├── build.gradle │ ├── libs │ └── src ├── app │ ├── app.iml │ ├── build │ ├── build.gradle │ ├── libs │ ├── proguard-rules.pro │ └── src ├── build.gradle ├── gradle │ └── wrapper ├── gradle.properties ├── gradlew ├── gradlew.bat ├── local.properties └── settings.gradle  这个项目包含MyPlugin和app以及CustomPluginSample三个Project（看目录下是否有build.gradle文件）
其中CustomPluginSample是Root Project，与其他Project的区别是多了一个settings.gradle文件，带有这个文件的Project表明它是一个Multi Project，这个文件是告诉Gradle项目和子项目是如何构造的，我们来看下这个文件的内容：
include &#39;:app&#39;, &#39;:MyPlugin&#39;  内容简单易懂，就是调用include函数把app和MyPlugin包含到项目当中，而build.gradle文件中则是配置当前Project的构建脚本。</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA/Android Studio插件开发入门指南</title>
      <link>https://richardwrq.github.io/2018/ideaplugin/</link>
      <pubDate>Wed, 21 Nov 2018 15:13:22 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/ideaplugin/</guid>
      <description>基于IntelliJ平台的产品都可以通过添加插件来丰富其原有的功能，JetBrains团队也我们提供了丰富的API来进行插件开发，所有的插件都可以在JetBrains Plugin Repository找到。常见的插件类型有：
 自定义语言支持（如Java、Kotlin） 框架集成 工具集成 用户界面插件  这些类型插件的介绍以及功能就不一一细说了，官网也有比较详细的介绍。 简单来说，IDEA也好Android Studio也好（以下统一称为IDE），它们为插件提供了运行环境，通过各种插件的配合来实现不同的功能。下面就先介绍开发IDEA插件前需要哪些准备。
 安装IDEA，如果想在开发插件的过程中进行Debug，那么还需要把IDEA的源码下载下来(Github源码地址) 配置IntelliJ Platform SDK，也就是开发插件所需的SDK，类似开发Android应用时需要Android SDK，并且插件都是运行在JVM上的，所以也需要配置JDK的路径 指定Sandbox Home目录，Sandbox Home目录用于存放插件项目实例的一些配置文件。在macOS系统中默认存放路径是/Users/{用户名}/Library/Caches/IdeaIC2018.2/plugins-sandbox  配置SDK，如果你把IDEA源码也下载了，那么还需要配置一下源码的路径 环境搭建好了，那么接下来我们就创建一个简易的插件工程，依次点击File-&amp;gt;New-&amp;gt;Project然后在弹出框左栏选择Gradle，然后在右侧一栏勾选IntelliJ Platform Plugin（如果想要使用Kotlin进行开发就把Kotlin那一项也勾选上） 项目创建好后长这样： 创建Action 插件可以自定义IDE的UI，在菜单或工具栏中新加入一个Item。SDK提供了一个类AnAction，这个类的actionPerformed方法在你每次在菜单栏中选中或在工具栏中点击对应项时都会被调用。创建一个Action只需要两步：
 定义派生于AnAction的类 注册Action  当然你也可以定义一组派生于AnAction的类
定义Action 下面的代码是我仿照官方例子定义的一个Action，只是把Java改成了Kotlin实现
class TextBoxes : AnAction(&amp;quot;Text _Boxes&amp;quot;) { override fun actionPerformed(e: AnActionEvent) { val project = e.getData(PlatformDataKeys.PROJECT)//这个Project是不是很熟悉？它其实跟Gradle中的Project意义是一样的 val txt = Messages.showInputDialog(project, &amp;quot;What is your name?&amp;quot;, &amp;quot;Input your name&amp;quot;, Messages.getQuestionIcon()) Messages.showMessageDialog(project, &amp;quot;Hello, $txt!\\n I am glad to see you.</description>
    </item>
    
  </channel>
</rss>