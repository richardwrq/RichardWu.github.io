<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on RichardWu&#39;s Blog</title>
    <link>https://richardwrq.github.io/posts/</link>
    <description>Recent content in Posts on RichardWu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 14 Feb 2021 12:25:28 +0800</lastBuildDate>
    
	<atom:link href="https://richardwrq.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP协议详解</title>
      <link>https://richardwrq.github.io/2021/tcp%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 14 Feb 2021 12:25:28 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2021/tcp%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
      <description>TCP\IP协议详解  本文中用到的图片转自： 头条文章
 TCP与UDP协议有什么区别？ TCP是一个面向连接的、可靠的、基于字节流的传输层协议。
UDP是一个面向无连接的传输层协议。
与UDP相比，TCP有以下特性：
 面向连接。所谓的连接，指的是客户端和服务器的连接，在双方互相通信之前，TCP 需要三次握手建立连接，而 UDP 没有相应建立连接的过程。 可靠性。TCP 使用了非常多机制的保证连接的可靠，这个可靠性体现在哪些方面呢？一个是有状态，另一个是可控制。 面向字节流。UDP 的数据传输是基于数据报的，这是因为仅仅只是继承了 IP 层的特性，而 TCP 为了维护状态，将一个个 IP 包变成了字节流。  TCP 会精准记录哪些数据发送了，哪些数据被对方接收了，哪些没有被接收到，而且保证数据包按序到达，不允许半点差错。这是有状态。
当意识到丢包了或者网络环境不佳，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发。这是可控制。
相应的，UDP 就是无状态, 不可控的。
三次握手 在介绍三次握手时我们先来看看TCP的报文头格式：
 端口号：用来标识同一台计算机的不同的应用进程。 源端口：源端口和IP地址的作用是标识报文的返回地址。 目的端口：端口指明接收方计算机上的应用程序接口。（TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。） 序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。 数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何可选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32&amp;frasl;8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。 保留：为将来定义新的用途保留，现在一般置0。 控制位：URG ACK PSH RST SYN FIN，共6个，每一个标志位表示一个控制功能。  URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。 ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。 PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。 RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。 SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。 FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。  窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小16bit，因此窗口大小最大为65535。 校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。 紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。 选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。 数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。  报头格式介绍完了，接下来我们看看TCP的三次握手过程：</description>
    </item>
    
    <item>
      <title>自定义Gradle插件</title>
      <link>https://richardwrq.github.io/2019/%E8%87%AA%E5%AE%9A%E4%B9%89gradle%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 02 Jan 2019 20:36:28 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2019/%E8%87%AA%E5%AE%9A%E4%B9%89gradle%E6%8F%92%E4%BB%B6/</guid>
      <description>是什么 Gradle是一个开源的自动化构建工具，可以使用groovy或kotlin来编写Gradle构建脚本，具有高度可定制、更快的编译速度以及功能强大等特性。
Gradle的核心为构建任何东西提供了一个基础架构，但是插件允许构建脚本作者花最少的努力完成任务，允许他们专注于构建什么，而不是如何构建。简单来说可以把Gradle理解为是一个编程框架，我们只要遵循它的设计规则，利用它提供的API可以编写出各种各样的插件；在Gradle中，每一个待编译的工程是一个Project，每一个Project在构建的时候都会包含一系列的Task。一个Android项目的构建大致包含：Kotlin源码编译、Java源码编译、资源编译、JNI编译、Lint检查、混淆、打包、签名等等若干个Task任务。
Gradle也是一个Java或者说JVM应用，这个应用的任务就是去完成构建期的工作，我们在编写Gradle插件的时候其实和编写一个Android应用是非常类似的，只需要遵循Gradle定义的规则以及了解它的一些生命周期即可（就和我们需要了解四大组件的生命周期一样）。
下面是一个Gradle项目的结构：
. ├── CustomPluginSample.iml ├── MyPlugin │ ├── MyPlugin.iml │ ├── build.gradle │ ├── libs │ └── src ├── app │ ├── app.iml │ ├── build │ ├── build.gradle │ ├── libs │ ├── proguard-rules.pro │ └── src ├── build.gradle ├── gradle │ └── wrapper ├── gradle.properties ├── gradlew ├── gradlew.bat ├── local.properties └── settings.gradle  这个项目包含MyPlugin和app以及CustomPluginSample三个Project（看目录下是否有build.gradle文件）
其中CustomPluginSample是Root Project，与其他Project的区别是多了一个settings.gradle文件，带有这个文件的Project表明它是一个Multi Project，这个文件是告诉Gradle项目和子项目是如何构造的，我们来看下这个文件的内容：
include &#39;:app&#39;, &#39;:MyPlugin&#39;  内容简单易懂，就是调用include函数把app和MyPlugin包含到项目当中，而build.gradle文件中则是配置当前Project的构建脚本。</description>
    </item>
    
    <item>
      <title>Android组件化之路</title>
      <link>https://richardwrq.github.io/2018/android%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Fri, 21 Dec 2018 14:20:24 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/android%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B9%8B%E8%B7%AF/</guid>
      <description>Android组件化之路 首先先分清楚两个概念：
模块化 模块化编程是将一个程序按照功能拆分成相互独立的若干模块，它强调将程序的功能分离成独立的、可替换的模块。每个模块内只有与其相关功能的内容。
模块化编程和结构化编程与面向对象编程是密切相关的，它们的目的都是将大型软件程序划分成一个个更小的部分。模块化编程的粒度会更“粗”一些。在Java9中也在编译器层面提供了模块化的支持：Java Platform Module System 。
组件是一个类似的概念，但通常指更高的级别；组件是整个系统的一部分，而模块是单个程序的一部分。“模块”一词因语言而有很大差异；在Python中，它非常小，每个文件都是一个模块，而在Java 9中，它是非常大的，其中模块是包的集合，包又是文件的集合。
在面向对象编程中，通常使用接口作为模块间通信的桥梁，也就是基于接口的编程。
组件化 组件化开发是软件工程的一个分支，它强调对给定软件系统中广泛可用的功能进行分割。基于可重用的目的将一个大的软件系统拆分成多个独立的组件，减少系统耦合度。
组件化开发中认为组件作为系统的一部分，是可独立运行的服务，维基百科中举了一个例子：在web服务中，有一种面向服务的架构设计&amp;ndash;service-oriented architectures (SOA)，这种架构设计从业务角度出发，利用企业现有的各种软件体系，重新整合并构建起一套新的软件架构。这套软件架构可以随着业务的变化，随时灵活地结合现有服务，组成一个新的软件。增加应用系统的灵活性。
组件可以产生或者消费事件，也可以应用于事件驱动架构。
 组件之间通过接口进行通信 组件是可替换的，如果后续组件满足初始组件的需求（通过接口表示），则组件可以替换另一个组件（在设计时或运行时），因此可以用更新的版本或替代的版本替换组件，而不会破坏系统的运行。 一个判断可替换组件的经验法则是：如果组件B至少提供了A提供的组件，并且使用的组件不超过A使用的组件，那么组件B可以立即替换组件A 当组件直接与用户交互时，应该考虑基于组件的可用性测试。 组件需要是完全文档化、全面测试、具有全面的输入效度检查的。  模块化 or 组件化 不管是模块化还是组件化，都不是一个新的设计思想，它们最早都是在20世纪60年代就已经被提出了，但是早期的移动应用由于相对简单，本身逻辑功能也不多，所以在移动端的应用反而没那么广泛。（虽然Java最开始的模块化是针对在移动和嵌入式设备上的应用设计的）。
从上面的概述来看其实组件化跟模块化没有明显的区别；一个登录功能可以是一个模块也可以是一个组件，一个日期选择控件可以是一个模块，也可以是一个组件，因为不管是模块化还是组件化，它们都有一个共同的目标：将一个大的软件系统细化成一个个模块或者组件，都是为了重用和解耦。因此没有一个明确的界线去区分它们。
网上很多文章对于组件和模块的定义也是不尽相同的，一些人认为组件的粒度更细，它只是具备单一功能与业务无关的组件，比如一个日历选择控件就认为是一个组件。而模块他们认为就是业务模块，顾名思义，就是按业务划分而成的模块。而另一部分人则相反。
在维基百科对模块化的解释中有这么一句：
 A component is a similar concept, but typically refers to a higher level; a component is a piece of a whole system, while a module is a piece of an individual program
 也就是认为组件粒度较模块要更大，所以本文对组件和模块做出以下定义：
 组件：侧重于业务，可编译成单独的app，一般只负责单一业务，具备自身的生命周期（通常包含Android四大组件的一个或多个，所以称之为组件也更加贴切） 模块：侧重于功能，与业务无关，比如自定义控件、网络请求库、图片加载库等  而从Android Studio推出之后，我们在开发项目时也会有意识的将一些可重用的代码逻辑抽离成一个个的Module，这也就是模块化开发的雏形。当然，组件化开发也不是就尽善尽美的，下面列举了它的一些优缺点：</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA/Android Studio插件开发入门指南</title>
      <link>https://richardwrq.github.io/2018/ideaplugin/</link>
      <pubDate>Wed, 21 Nov 2018 15:13:22 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/ideaplugin/</guid>
      <description>基于IntelliJ平台的产品都可以通过添加插件来丰富其原有的功能，JetBrains团队也我们提供了丰富的API来进行插件开发，所有的插件都可以在JetBrains Plugin Repository找到。常见的插件类型有：
 自定义语言支持（如Java、Kotlin） 框架集成 工具集成 用户界面插件  这些类型插件的介绍以及功能就不一一细说了，官网也有比较详细的介绍。 简单来说，IDEA也好Android Studio也好（以下统一称为IDE），它们为插件提供了运行环境，通过各种插件的配合来实现不同的功能。下面就先介绍开发IDEA插件前需要哪些准备。
 安装IDEA，如果想在开发插件的过程中进行Debug，那么还需要把IDEA的源码下载下来(Github源码地址) 配置IntelliJ Platform SDK，也就是开发插件所需的SDK，类似开发Android应用时需要Android SDK，并且插件都是运行在JVM上的，所以也需要配置JDK的路径 指定Sandbox Home目录，Sandbox Home目录用于存放插件项目实例的一些配置文件。在macOS系统中默认存放路径是/Users/{用户名}/Library/Caches/IdeaIC2018.2/plugins-sandbox  配置SDK，如果你把IDEA源码也下载了，那么还需要配置一下源码的路径 环境搭建好了，那么接下来我们就创建一个简易的插件工程，依次点击File-&amp;gt;New-&amp;gt;Project然后在弹出框左栏选择Gradle，然后在右侧一栏勾选IntelliJ Platform Plugin（如果想要使用Kotlin进行开发就把Kotlin那一项也勾选上） 项目创建好后长这样： 创建Action 插件可以自定义IDE的UI，在菜单或工具栏中新加入一个Item。SDK提供了一个类AnAction，这个类的actionPerformed方法在你每次在菜单栏中选中或在工具栏中点击对应项时都会被调用。创建一个Action只需要两步：
 定义派生于AnAction的类 注册Action  当然你也可以定义一组派生于AnAction的类
定义Action 下面的代码是我仿照官方例子定义的一个Action，只是把Java改成了Kotlin实现
class TextBoxes : AnAction(&amp;quot;Text _Boxes&amp;quot;) { override fun actionPerformed(e: AnActionEvent) { val project = e.getData(PlatformDataKeys.PROJECT)//这个Project是不是很熟悉？它其实跟Gradle中的Project意义是一样的 val txt = Messages.showInputDialog(project, &amp;quot;What is your name?&amp;quot;, &amp;quot;Input your name&amp;quot;, Messages.getQuestionIcon()) Messages.showMessageDialog(project, &amp;quot;Hello, $txt!\\n I am glad to see you.</description>
    </item>
    
    <item>
      <title>注解处理器Annotation Processor中判断Java或Kotlin类</title>
      <link>https://richardwrq.github.io/2018/judgejavaorkt/</link>
      <pubDate>Fri, 27 Apr 2018 19:45:50 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/judgejavaorkt/</guid>
      <description>在Android Studio中，项目编译build之后kapt会在项目的build/tmp/kapt3/stubs目录下会生成kotlin编写的类的Java“存根类”，在这些类的顶部我们可以看到有这样一个注解@kotlin.Metadata(...) @Metadata是 Kotlin 里比较特殊的一个注解。它记录了 Kotlin 代码元素的一些信息，比如 class 的可见性，function 的返回值，参数类型，property 的 lateinit，nullable 的属性等等。这些 Metadata 的信息由 kotlinc 生成，最终会以注解的形式存于 .class 文件。 所以要在注解处理器判断一个类是kotlin语言或者Java语言编写的我们可以通过判断该类是否有@Metadata注解来区分：
/** * if true mean this class is java class */ private fun isJavaFile(element: TypeElement): Boolean { val tmMetadata = mElements.getTypeElement(&amp;quot;kotlin.Metadata&amp;quot;).asType() return element.annotationMirrors.find { it.annotationType == tmMetadata } == null }  </description>
    </item>
    
    <item>
      <title>使用Kotlin打造Android路由框架-Krouter</title>
      <link>https://richardwrq.github.io/2018/krouter/</link>
      <pubDate>Fri, 27 Apr 2018 12:35:27 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/krouter/</guid>
      <description>KRouter(https://github.com/richardwrq/KRouter)路由框架借助gradle插件、[kapt](https://blog.jetbrains.com/kotlin/2015/05/kapt-annotation-processing-for-kotlin/)实现了依赖注入、为Android平台页面启动提供路由功能。 源码不复杂，在关键地方也有注释说明，建议打算或正在使用kapt+kotlinpoet遇到坑的同学可以fork一下项目，或许能找到你想要的答案，只要将整个流程了解清楚了，相信你自己也能撸一个轮子出来，目前许多开源框架dagger、butter knife、greendao等实现原理都是一致的。 ####从startActivity开始说起 在组件化开发的实践过程中，当我完成一个模块的开发后（比如说这个模块中有一个Activity或者Service供调用者调用），其他模块的开发者要启动我这个模块中的Activity的代码我们再熟悉不过了：
val intent = Intent(this, MainActivity::class.java) intent.putExtra(&amp;quot;param1&amp;quot;, &amp;quot;1&amp;quot;) intent.putExtra(&amp;quot;param2&amp;quot;, &amp;quot;2&amp;quot;) startActivity(intent)  当然，其他模块的开发人员需要知道我们这个Activity的类名以及传入的参数对应的key值（上面的param1和param2），这时候我就想，在每一个需要启动这个页面的地方都存在着类似的样板代码，而且被启动的Activity在取出参数对属性进行赋值时的代码也比较繁琐，于是在网上查找相关资料了解到目前主流的路由框架（ARouter、Router等）都支持这些功能，秉着尽量不重复造轮子的观念我fork了ARouter项目，但是阅读源码后发现其暂时不支持Service的启动，而我负责的项目里面全是运行在后台的Service。。。紧接着也大概了解了一下其他一些框架，都存在一些不太满意的地方，考虑再三，干脆自己撸一个轮子出来好了。
首先来看一段最简单的发起路由请求的代码(Java调用)：
KRouter.INSTANCE.create(&amp;quot;krouter/main/activity?test=32&amp;quot;) .withFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP) .withString(&amp;quot;test2&amp;quot;, &amp;quot;this is test2&amp;quot;) .request();  其中krouter/main/activity?test=32为对应的路由路径，可以使用类似http请求的格式，在问号后紧接着的是请求参数，这些参数最终会自动包装在intent的extras中，也可以通过调用with开头的函数来配置请求参数。 上面的代码执行后最终会启动一个Activity，准确来说是一个带有@Route注解的Activity，它长这样：
@Route(path = &amp;quot;krouter/main/activity&amp;quot;) public class MainActivity extends Activity { ... @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getIntent().getIntExtra(&amp;quot;test&amp;quot;, -1);//这里可以获取到请求参数test } ... }  这是一个最基本的功能，怎么样，看起来还不错吧？跟大部分路由框架的调用方式差不多。现在主流的路由框架是怎么做到的呢？下面就看我一一道来。
在使用KRouter的API前首先需要为一些类添加注解：
/** * User: WuRuiqiang(263454190@qq.com) * Date: 18/1/2 * Time: 上午10:53 * Version: v1.0 * Description：用于标记可路由的组件 */ @Target(AnnotationTarget.</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://richardwrq.github.io/2018/first/</link>
      <pubDate>Fri, 27 Apr 2018 11:12:45 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/first/</guid>
      <description>标题 aaa bbb ccc</description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://richardwrq.github.io/2018/second/</link>
      <pubDate>Fri, 27 Apr 2018 10:55:10 +0800</pubDate>
      
      <guid>https://richardwrq.github.io/2018/second/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://richardwrq.github.io/1/tcpip%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://richardwrq.github.io/1/tcpip%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</guid>
      <description>TCP\IP协议详解 #### TCP与UDP协议有什么区别？ **TCP是一个面向连接的、可靠的、基于字节流的传输层协议。** **UDP是一个面向无连接的传输层协议。** 与UDP相比，TCP有以下特性： 1. **面向连接**。所谓的连接，指的是客户端和服务器的连接，在双方互相通信之前，TCP 需要三次握手建立连接，而 UDP 没有相应建立连接的过程。 2. **可靠性**。TCP 使用了非常多机制的保证连接的可靠，这个可靠性体现在哪些方面呢？一个是有状态，另一个是可控制。 3. **面向字节流**。UDP 的数据传输是基于数据报的，这是因为仅仅只是继承了 IP 层的特性，而 TCP 为了维护状态，将一个个 IP 包变成了字节流。 TCP 会精准记录哪些数据发送了，哪些数据被对方接收了，哪些没有被接收到，而且保证数据包按序到达，不允许半点差错。这是**有状态**。 当意识到丢包了或者网络环境不佳，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发。这是**可控制**。 相应的，UDP 就是无状态, 不可控的。 ### 三次握手 在介绍三次握手时我们先来看看TCP的报文头格式： ![img](/Users/wuruiqiang/Documents/Markdown文章/TCP协议详解/823435-20170323092941611-1541980584.png) - **端口号**：用来标识同一台计算机的不同的应用进程。 - **源端口**：源端口和IP地址的作用是标识报文的返回地址。 - **目的端口**：端口指明接收方计算机上的应用程序接口。（TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。） - **序号和确认号**：是TCP可靠传输的关键部分。**序号**是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。 - **数据偏移／首部长度**：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何可选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。 - **保留**：为将来定义新的用途保留，现在一般置0。 - **控制位**：URG ACK PSH RST SYN FIN，共6个，每一个标志位表示一个控制功能。 1. **URG**：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。 2. **ACK**：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。 3. **PSH**：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。 4. **RST**：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。 5. **SYN**：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。 6. **FIN**：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。 - **窗口**：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小16bit，因此窗口大小最大为65535。 - **校验和**：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。 - **紧急指针**：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。 - **选项和填充**：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。 - **数据部分**： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。 报头格式介绍完了，接下来我们看看TCP的三次握手过程： !</description>
    </item>
    
  </channel>
</rss>